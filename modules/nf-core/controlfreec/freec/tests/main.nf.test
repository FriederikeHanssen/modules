nextflow_process {

    name "Test Process CONTROLFREEC_FREEC"
    script "../main.nf"
    process "CONTROLFREEC_FREEC"
    config "./nextflow.config"

    tag "modules"
    tag "modules_nfcore"
    tag "controlfreec"
    tag "controlfreec/freec"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("controlfreec - tumor/normal") {

        setup {
            run("UNTAR"){
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id:'archive'],
                                file(params.test_data['homo_sapiens']['genome']['genome_21_chromosomes_dir'], checkIfExists: true)
                            ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false, sex:'XX' ], // meta map
                    file(params.test_data['homo_sapiens']['illumina']['test_mpileup'], checkIfExists: true),
                    file(params.test_data['homo_sapiens']['illumina']['test2_mpileup'], checkIfExists: true),
                    [],[],[],[]
                ]

                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                input[3] = []
                input[4] = file(params.test_data['homo_sapiens']['genome']['dbsnp_138_hg38_21_vcf_gz'], checkIfExists: true)
                input[5] = file(params.test_data['homo_sapiens']['genome']['dbsnp_138_hg38_21_vcf_gz_tbi'], checkIfExists: true)
                input[6] = UNTAR.out.untar.map{ it[1] }
                input[7] = []
                input[8] = file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
                input[9] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.config.get(1)).readLines().contains("[general]") },
                { assert snapshot(
                    process.out.bedgraph,
                    process.out.control_cpn,
                    process.out.sample_cpn,
                    process.out.gcprofile_cpn,
                    process.out.BAF,
                    process.out.CNV,
                    process.out.info,
                    process.out.ratio,
                    process.out.versions).match() }
            )
        }

    }

    test("controlfreec - single") {

        setup {
            run("UNTAR"){
                script "../../../untar/main.nf"
                process {
                    """
                    input[0] = [ [id:'archive'],
                                file(params.test_data['homo_sapiens']['genome']['genome_21_chromosomes_dir'], checkIfExists: true)
                            ]
                    """
                }
            }
        }

        when {
            process {
                """
                input[0] = [
                    [ id:'test2', single_end:false, sex:'XX' ], // meta map
                    [],
                    file(params.test_data['homo_sapiens']['illumina']['test2_mpileup'], checkIfExists: true),
                    [],[],[],[]
                ]

                input[1] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta'], checkIfExists: true)
                input[2] = file(params.test_data['homo_sapiens']['genome']['genome_21_fasta_fai'], checkIfExists: true)
                input[3] = []
                input[4] = file(params.test_data['homo_sapiens']['genome']['dbsnp_138_hg38_21_vcf_gz'], checkIfExists: true)
                input[5] = file(params.test_data['homo_sapiens']['genome']['dbsnp_138_hg38_21_vcf_gz_tbi'], checkIfExists: true)
                input[6] = UNTAR.out.untar.map{ it[1] }
                input[7] = []
                input[8] = file(params.test_data['homo_sapiens']['genome']['genome_21_multi_interval_bed'], checkIfExists: true)
                input[9] = []
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert path(process.out.config.get(1)).readLines().contains("[general]") },
                { assert snapshot(
                    process.out.bedgraph,
                    process.out.control_cpn,
                    process.out.sample_cpn,
                    process.out.gcprofile_cpn,
                    process.out.BAF,
                    process.out.CNV,
                    process.out.info,
                    process.out.ratio,
                    process.out.versions).match() }
            )
        }

    }

}
